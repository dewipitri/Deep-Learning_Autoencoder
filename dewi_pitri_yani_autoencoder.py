# -*- coding: utf-8 -*-
"""Dewi Pitri Yani_Autoencoder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VNYUkkFVtC3reVFzk9W8o0Ji8iJtMVCp
"""

from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive

# 1. Mount ke path default
drive.mount('/content/drive')

# 2. Akses folder Anda
train_path = '/content/drive/MyDrive/Record algo pr/train'

# Verifikasi path
import os
if os.path.exists(train_path):
    print("✅ Path valid!")
else:
    print(f"❌ Folder tidak ditemukan. Periksa: {train_path}")

# --- Import Library yang Dibutuhkan ---
import os
import cv2
import numpy as np
from tqdm import tqdm
from sklearn.model_selection import train_test_split
from tensorflow.keras.layers import Input
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D
from tensorflow.keras.optimizers import Adam

# --- Konfigurasi ---
IMG_SIZE = 256  # Ukuran gambar
COLOR_DIR = "/content/drive/MyDrive/Record algo pr/train/color"
GRAY_DIR = "/content/drive/MyDrive/Record algo pr/train/grayscale"


# --- STEP 4: Load dan Preprocess Gambar ---
def load_images(folder, img_size):
    images_gray, images_color = [], []
    for filename in tqdm(os.listdir(folder)):
        path = os.path.join(folder, filename)
        img = cv2.imread(path)  # Perbaikan: cv2.imread yang benar

        if img is None:
            continue

        # Preprocess gambar berwarna (target)
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Perbaikan konversi warna
        img_rgb = cv2.resize(img_rgb, (img_size, img_size))
        img_rgb = img_rgb / 255.0  # Normalisasi [0,1]

        # Konversi ke grayscale (input)
        img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        img_gray = cv2.resize(img_gray, (img_size, img_size))
        img_gray = np.expand_dims(img_gray, axis=-1) / 255.0  # Perbaikan axis

        images_gray.append(img_gray)
        images_color.append(img_rgb)

    return np.array(images_gray), np.array(images_color)

# Load data
X_color = load_images(COLOR_DIR, IMG_SIZE)
X_gray = load_images(GRAY_DIR, IMG_SIZE)

# Split data train/test
X_train_gray, X_test_gray, X_train_color, X_test_color = train_test_split(
    X_gray, X_color, test_size=0.1, random_state=42)  # Perbaikan parameter test_size

import matplotlib.pyplot as plt

def show_results(model, X_gray, X_color, n=5):
    preds = model.predict(X_gray[:n])
    plt.figure(figsize=(15, 5))

    for i in range(n):
        # Grayscale
        plt.subplot(3, n, i + 1)
        plt.imshow(X_gray[i].squeeze(), cmap='gray')
        plt.title("Grayscale")
        plt.axis('off')

        # Hasil Pewarnaan
        plt.subplot(3, n, i + 1 + n)
        plt.imshow(preds[i])
        plt.title("Colorized")
        plt.axis('off')

        # Warna Asli
        plt.subplot(3, n, i + 1 + 2 * n)
        plt.imshow(X_color[i])
        plt.title("Original")
        plt.axis('off')

    plt.tight_layout()
    plt.show()

input_img = Input(shape=(IMG_SIZE, IMG_SIZE, 1))

# Encoder
x = Conv2D(64, (3, 3), activation='relu', padding='same')(input_img)
x = MaxPooling2D((2, 2), padding='same')(x)
x = Conv2D(128, (3, 3), activation='relu', padding='same')(x)
encoded = MaxPooling2D((2, 2), padding='same')(x)

# Decoder
x = Conv2D(128, (3, 3), activation='relu', padding='same')(encoded)
x = UpSampling2D((2, 2))(x)
x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)
x = UpSampling2D((2, 2))(x)
decoded = Conv2D(3, (3, 3), activation='sigmoid', padding='same')(x)

model = Model(input_img, decoded)
model.compile(optimizer=Adam(), loss='mse')

X_train_gray = X_train_gray.reshape(-1, 256, 256, 1)
X_test_gray = X_test_gray.reshape(-1, 256, 256, 1)
X_train_color = X_train_color.reshape(-1, 256, 256, 3)
X_test_color = X_test_color.reshape(-1, 256, 256, 3)

     plt.imshow((preds[i] * 255).astype(np.uint8)) # scaled back to 0-255 range
    plt.title("Colorized")

model.fit(X_train_gray, X_train_color,
          epochs=20,
          batch_size=16,
          shuffle=True,
          validation_data=(X_test_gray, X_test_color))

show_results(model, X_test_gray, X_test_color, n=5)